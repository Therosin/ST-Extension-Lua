{"version":2,"name":"LuaScripts","disableSend":false,"placeBeforeInput":false,"injectInput":false,"qrList":[{"id":1,"label":"TimeGreeting","title":"","message":"/lua code=\"\nlocal ctx = SillyTavern.GetContext()\nlocal user_name = ctx.name1\n\nlocal hour = os.date('*t').hour;\nlocal msg;\nif hour < 12 then\n    msg = 'Good morning, %s!'\nelseif hour < 18 then\n    msg = 'Good afternoon, %s!'\nelse\n    msg = 'Good evening, %s!'\nend\n\nreturn string.format(msg, user_name)\n\" | /setglobalvar key=TimeGreeting {{pipe}} ||\n/# to use this make sure LuaScripts QRset is global, and this QR is set to Execute on startup and chat change ||\n/# you can then use {{getglobalvar::TimedGreeting}} in any greeting message elsewhere ||","contextList":[],"preventAutoExecute":true,"isHidden":false,"executeOnStartup":true,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":true,"executeOnGroupMemberDraft":false,"automationId":""},{"id":3,"label":"DailyQuote","title":"","message":"/lua code=\"\nlocal ctx = SillyTavern.GetContext()\nlocal user_name = ctx.name1\n\nlocal quotes = {\n    'Believe you can and you\\'re halfway there.',\n    'The only way to do great work is to love what you do.',\n    'Don\\'t watch the clock; do what it does. Keep going.',\n    'The future belongs to those who believe in the beauty of their dreams.'\n}\n\nlocal quote = string.format('Here\\'s a quote for you, %s: \\\"%s\\\"', user_name, quotes[math.random(#quotes)])\nctx.registerMacro('DailyQuote', quote)\n\" ||\n/# to use this make sure LuaScripts QRset is global, and this QR is set to Execute on startup ||\n/# you can then use {{DailyQuote}} in any other messages ||","contextList":[],"preventAutoExecute":true,"isHidden":false,"executeOnStartup":true,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"automationId":""},{"id":5,"label":"QuickTutorial","title":"","message":"/# Can run raw lua. '...' contains a table 'context' containing passed 'data' and args ||\n/let code \"\nif not runcount then runcount=1 end\n-- lua scripts share the runtime, reloading the page or hitting reload runtime in extension settings will clear this.\nfunction hello(params)\n\tlocal name = params.data.name\n\tlocal message = string.format('Hello %s from Lua x%d', name, runcount)\n\truncount = runcount + 1\n\tprint(params.args) -- Look in DevConsole, print output goes there\n\treturn { message = message, name = name }\nend\nreturn hello(...) -- Note the ... here we pass in the params from ST.\n\" |\n/lua-run code={{var::code}} data=\"{\\\"name\\\": \\\"test\\\"}\" json=\"true\" foo bar |\n/# data is passed as ctx.data args passed to ctx.args (unsplit, single string) ||\n/# note the json=true, this is needed if you pass a json string or ST dict/array vars. ||\n/echo {{pipe}} ||\n/# the return value from lua gets piped out for use, if you return a table it's stringified to work with STscript ||\n/# lua-run alias ||\n/# lua has access to SillyTavern context via SillyTavern.GetContext() ||\n/# global method jstype() can be used to get the \"real type\" of values passed in by JS from STscript/SillyTavern context ||\n/lua code=\"\nlocal ctx = SillyTavern.GetContext() -- returns js object containing SillyTavern context\nreturn string.format('Lua type: %s - Js type: %s', type(ctx),jstype(ctx))\n\" | /echo {{pipe}} ||\n/# Example: call another QR, note the use of :await() this allows for waiting on an async function in JS to complete ||\n/lua code=\"\nprint('test')\nlocal res = SillyTavern.GetContext().executeSlashCommands('/:LuaScripts.HelloWorld'):await()\n-- not really needed here, but for something like SillyTavern.GetContext().callGenericPopup() it would be\nreturn tostring(res.pipe) -- the result is in res.pipe\n\" ||","contextList":[],"preventAutoExecute":true,"isHidden":false,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"automationId":""},{"id":17,"label":"HelloWorld","title":"","message":"/# the classic hello world example ||\n/lua code=\"\nprint('Hello world')\nreturn 'Hello World, from Lua!'\n\" | /echo {{pipe}}","contextList":[],"preventAutoExecute":true,"isHidden":false,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"automationId":""},{"id":13,"label":"LuaInception","title":"","message":"/let code \"\nlocal stcode = [[\n\t/lua code=\\\"\n\tSillyTavern.GetContext().executeSlashCommands('/comment Hello World') \n\t\\\"\n]]\nSillyTavern.GetContext().executeSlashCommands(stcode)\n\" ||\n\n/lua code={{var::code}} ||\n/# this is just a random example, it serves no real purpose. ||","contextList":[],"preventAutoExecute":true,"isHidden":false,"executeOnStartup":false,"executeOnUser":false,"executeOnAi":false,"executeOnChatChange":false,"executeOnGroupMemberDraft":false,"automationId":""}],"idIndex":18}